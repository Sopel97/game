Basic tiles will be registerd at tile database at compile time (they have no static tile data nor id, it's only template with methods)
Actual tile types will be loaded from assets and made on base tiles (base tile name in tile asset identifies name of base tile to be used as template) Static tile data is loaded and stored for every tile type (in code known as template).
Tiles for use in world will be produced (copied) from tile types (templates) when needed by id or name.

Same system will be made for other world objects which will be loaded from assets (like monsters).

For every appearing tile every unique neighbour draws border on it.

TODO: field in StaticTileData for information if tile is solid or not

TODO: RandomlySpreadingSolidTile class for tiles that randomly spread (like grass) with customizable range, probablity (in average gameticks/spread), required neighbour for tile to be placed (certain tiles, only solids, nonsolids), allowed target tile types to spread to (in similar format as required neighbour)

"Background layer with separate tile drawing functions (sprites stay the same) (every tile at background should not have inner border and have outer border only with air)
darkened at drawing by constant factor"
Note: since foreground drawing changed it may be applied also to background without making separate method.

!!! we no longer do inner borders. Only outer borders will be present. But we may keep something similar to draw inner parts matching outer border (for example grass would draw a bit outside and a bit inside tile). We could make it really easly if needed.

Thought note: Get inner border back to work but in a bit different way. It would have its own inner border type (similar to outer precedence) (so it would be able to make few tile types to be like one when drawing inner border. for example different types of stone one to each other) and it would relay only on this when drawing (similarily to outer borders). This will allow them to be inner parts of outer border (like grass rendered a partialy in tile. When outer border is enabled along with inner one then inner border will be done same as outer (based on outer rather than inner precedence)) or work alone without outer borders (like pipes, or bricks) (sprite can be adapted to both when needed. It may a border or something else). Big difference from older design is that tile borders have now 2 different types and they can't be used in change based on conditions (before inner borders were indicated by negative precedences and negative precedence was required from other tiles to not draw outer border to them. Now that tiles have those two border types separated so there will be no problems described in older note.

Noted fix: Tiles take too much memory. It seems like every tile takes ~100B while it should 8. THis have to be resolved because map with 32M tiles takes 1.6GB of memory.
This is not an issue anymore bit cause is not known. Now uses 600MB with 32M tiles (64bit). There may be needed some improvements in the future.

Noted fix: when moving camera redrawing is not precise. Sometimes it lefts (periodic) inaccurations (offs by one) with positioning. Problem happened when camera was at intiger position.

!!!important !!! method for checking if smth is on screen and drawing it on screen regarding world wrap. (for example tile position affects where it is drawn. If we want to draw one tile it has 'infinitely' many correct positions but only one o them will result in drawing on screen. This position is determined by camera position.)